---
import Logo from "./icons/Logo.astro";
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
    {
        title: "Experiencia",
        label: "experiencia",
        url: "/#ExperienceItem"
    },
    {
        title: "Proyectos",
        label: "proyectos",
        url: "/#Projects"
    },
    {
        title: "Sobre Mi",
        label: "sobre-mi",
        url: "/#sobreMi"
    },
    {
        title: "Contacto",
        label: "contacto",
        url: "mailto:malcomquiros3@gmail.com "
    }
]
---

<header class="flex justify-between items-center py-10 w-full xl:w-[1120px] mx-auto">
<Logo/>
    <nav class="flex flex-row gap-x-10 opcity-80 text-colorPrincipal font-medium text-lg">
        {
            navItems.map((link) => (
                <a
                class="relative block px-2 py-2 transition hover:text-colorSecondary dark:text-colorSecondary"
                aria-label={link.label}
                href={link.url}
                >
                    {link.title}
                </a>
            ))
        }
        <ThemeToggle/>
    </nav>
</header>

<script>
    document.addEventListener("astro:pages-load", () => {
        const sections = document.querySelectorAll("section")
        const navItems = document.querySelectorAll("header nav a")

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if(entry.isIntersecting){
                    navItems.forEach((item) => {
                        if(item.getAttribute("aria-label") == entry.target.id){
                            item.classList.add("text-colorSecondary")
                        } else{
                            item.classList.remove("text-colorSecondary")
                        }
                    })
                }
            })
        }

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        })

        sections.forEach((section) => {
            observer.observe(section)
        })

        document.onvisibilitychange = () => {
            if(document.visibilityState === "hidden"){
                observer.disconnect()
            } else{
                sections.forEach((section) => {
                    observer.observe(section)
                })
            }
        }
    })
</script>

<style>
    nav{
        animation: nav-shadow 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadown{
        to{
            @apply shadow-lg ring backdrop-blur dark:bg-colorComplementary bg-white/50 ring-colorComplementary
        }
    }
</style>